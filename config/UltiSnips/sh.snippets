# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txtsnippet init_logger "init_logger() method to setup bash logger" b
snippet setup "Init setup dotfiles script" b
#!/usr/bin/env bash
# """Setup script to install symlinks if specified
# """

# shellcheck disable=SC2034
SCRIPTPATH="$( cd -- "$(dirname "\$0")" &>/dev/null || exit 1 ; pwd -P )"
SCRIPTNAME="$(basename "\$0")"

init_setup(){
  local setup_file="/tmp/_setup.sh"
  if ping -q -c 1 -W 1 framagit.org &> /dev/null
  then
    # shellcheck disable=SC1090
    source <(curl -s https://framagit.org/-/snippets/7207/raw/main/_get_setup.sh)
  elif [[ -f "${setup_file}" ]]
  then
    echo -e "\e[1;32m[INFO]\e[0m\e[32m ${SCRIPTNAME}: Not able to ping \e[1;31mframagit.org, will source existing **${setup_file}**\e[0m"
    # shellcheck disable=SC1090
    source <(cat "${setup_file}")
  else
    echo -e "\e[1;31m[ERROR]\e[0m\e[31m ${SCRIPTNAME}: Not able to ping \e[1;31mframagit.org\e[0m"
    echo -e "\e[1;31m[ERROR]\e[0m\e[31m ${SCRIPTNAME}: And setup lib file ${setup_file} does not exists.\e[0m"
    echo -e "\e[1;31m[ERROR]\e[0m\e[31m ${SCRIPTNAME}: Logger not available, script will now exit\e[0m"
    exit 1
  fi
}

main(){
  local DEBUG_LEVEL="${SETUP_DEBUG_LEVEL:-"INFO"}"
  init_setup
  setup "LINKS" "PKGS" "CRONS"
}

DATA_DIR="${XDG_DATA_HOME:-${HOME}/.local/share}"
CONFIG_DIR="${XDG_CONFIG_HOME:-${HOME}/.config}"

declare -A LINKS
# LINKS["<DEST>"]="<SRC>"

declare -A CRONS
# CRONS["<PATH|CMD>"]="<RECURRENCE>"

PKGS=(
#  "<PKGS_NAME>"
)

main "$@"

# vim: ft=sh

endsnippet
snippet bashscript "Init bash script" b
#!/usr/bin/env bash
# """TODO
# """

# shellcheck disable=SC2034
SCRIPTPATH="$( cd -- "$(dirname "\$0")" >/dev/null 2>&1 || exit 1 ; pwd -P )"
SCRIPTNAME="$(basename "\$0")"

init_logger(){
  log_file="/tmp/_log.sh"
  if ping -q -c 1 framagit.org &> /dev/null
  then
    # shellcheck disable=SC1090
    source <(curl -s https://framagit.org/-/snippets/7183/raw/main/_get_log.sh)
  elif [[ -f "${log_file}" ]]
  then
    # shellcheck disable=SC1090
    source <(cat "${log_file}")
  else
    echo -e "\e[1;31m[ERROR]\e[0m\e[31m \$0: Not able to ping \e[1;31mframagit.org\e[0m"
    echo -e "\e[1;31m[ERROR]\e[0m\e[31m \$0: And log file ${log_file} does not exists.\e[0m"
    echo -e "\e[1;31m[ERROR]\e[0m\e[31m \$0: Logger not available, script will now exit\e[0m"
    exit 1
  fi
}



main(){
  # TODO Change below substitution if need
  local DEBUG_LEVEL="${DEBUG_LEVEL:-INFO}"
  init_logger
  # TODO
}

main "$@"

# vim: ft=sh
endsnippet
snippet init_logger "init_logger() method to setup bash logger" b
init_logger(){
  log_file="/tmp/_log.sh"
  if ping -q -c 1 framagit.org &> /dev/null
  then
    # shellcheck disable=SC1090
    source <(curl -s https://framagit.org/-/snippets/7183/raw/main/_get_log.sh)
  elif [[ -f "${log_file}" ]]
  then
    # shellcheck disable=SC1090
    source <(cat "${log_file}")
  else
    echo -e "\e[1;31m[ERROR]\e[0m\e[31m \$0: Not able to ping \e[1;31mframagit.org\e[0m"
    echo -e "\e[1;31m[ERROR]\e[0m\e[31m \$0: And log file ${log_file} does not exists.\e[0m"
    echo -e "\e[1;31m[ERROR]\e[0m\e[31m \$0: Logger not available, script will now exit\e[0m"
    exit 1
  fi
}
endsnippet
snippet check_dir "Function to check if directory exists, create it if not" b
check_dir(){
  local dir="\$1"
  if ! [[ -d "${dir}" ]]
  then
    _log "INFO" "Create directory ${dir}"
    mkdir -p "${dir}"
  fi
}
endsnippet
snippet check_cmd "Check if cmd exists, if not exit 1 or return 1" b
check_cmd() {
  cmd=\$1
  quit=${2:-true}
  if ! command -v "${cmd}" &> /dev/null
  then
    if $quit
    then
      _log "ERROR" "No ${cmd} executable found."
      exit 1
    fi
    _log "WARNING" "No ${cmd} executable found."
    return 1
  fi
  return 0
}
endsnippet
snippet check_file "Check if file exists, move it if required" b
check_file() {
  local file=\$1
  local backup=${2:-"false"}
  if [[ -f "${file}" ]] && [[ "${backup}" == "true" ]]
  then
    _log "INFO" "File ${file} already exists ! Will moved to ${file}.bak"
    mv "${file}" "${file}.bak"
    return 0
  elif [[ -f "${file}" ]] && [[ "${backup}" == true ]]
  then
    _log "INFO" "File ${file} already exists ! Will not be moved"
    return 1
  fi
}
endsnippet